// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  login     String   @unique
  password  String
  version   Int      @default(autoincrement())
  createdAt BigInt 
  updatedAt BigInt 
}

model Album {
  id        String          @id @default(uuid())
  name      String
  year      Int
  artistId  String?
  artist    Artist?         @relation(fields: [artistId], references: [id])
  tracks    Track[]
  favorite FavoriteAlbum?
}

model Artist {
  id     String  @id @default(uuid())
  name   String
  grammy Boolean @default(false)
  albums Album[]
  tracks Track[]
  favorite FavoriteArtist?
}

model Track {
  id       String  @id @default(uuid())
  name     String
  artistId String?
  artist   Artist? @relation(fields: [artistId], references: [id])
  albumId  String?
  album    Album?  @relation(fields: [albumId], references: [id])
  duration Int
  favorite FavoriteTrack?
}

model FavoriteAlbum {
  id      Int    @id @default(autoincrement())
  albumId String @unique
  album   Album @relation(fields: [albumId], references: [id])
}

model FavoriteArtist {
  id       Int    @id @default(autoincrement())
  artistId String @unique
  artist   Artist @relation(fields: [artistId], references: [id])
}

model FavoriteTrack {
  id      Int    @id @default(autoincrement())
  trackId String @unique
  track   Track @relation(fields: [trackId], references: [id])
}